@using Microsoft.AspNetCore.Identity
@inject UserManager<AppUser> UserManager
@inject AppUserService AppUserService


<MudDialog IsVisible="Visible" IsVisibleChanged="@( e => VisibleChangedHandler(e))">
    <TitleContent>
        <MudText>Reset Password</MudText>
    </TitleContent>
    <DialogContent>
        <div>
            <TelerikForm Model="@appUser">
                <FormValidation>
                    <SolaProcurementV2.Server.DataValidator.FluentValidationValidator></SolaProcurementV2.Server.DataValidator.FluentValidationValidator>
                </FormValidation>
                <FormItems>
                    <FormItem>
                        <Template>
                            <label for="resetpassword" class="k-label k-form-label">New Password</label>
                            <TelerikTextBox Id="resetpassword" @bind-Value="@(appUser.Password)" Password="true"></TelerikTextBox>
                            <TelerikValidationMessage For="@(() => appUser.Password)"></TelerikValidationMessage>
                        </Template>
                    </FormItem>
                    <FormItem>
                        <Template>
                            <label for="resetpasswordconfirmation" class="k-label k-form-label">Confirm Password</label>
                            <TelerikTextBox Id="resetpasswordconfirmation" @bind-Value="@(appUser.PasswordConfirmation)" Password="true"></TelerikTextBox>
                            <TelerikValidationMessage For="@(() => appUser.PasswordConfirmation)"></TelerikValidationMessage>
                        </Template>
                    </FormItem>
                </FormItems>
                <FormButtons></FormButtons>
            </TelerikForm>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@Reset">Reset Password</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="(() => Visible = !Visible)">Close</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [Parameter] public int UserId { get; set; } = 0;
    [Parameter] public bool Visible { get; set; } = false;
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }

    [CascadingParameter] public AppState AppState { get; set; }

    AppUser appUser = new();

    async Task Reset()
    {
        var password = appUser.Password;
        appUser.Password = "";
        appUser.PasswordConfirmation = "";

        AppState.IsLoading = true;
        var result = await AppUserService.ResetPasswordByIdAsync(UserId, password, UserManager);
        AppState.IsLoading = false;

        if (result.Succeeded)
        {
            AppState.ShowAlert("Password successfully set", Severity.Success);
        }
        else
        {
            foreach (var item in result.Errors)
            {
                AppState.ShowAlert(item.Description, Severity.Error);
            }
        }
        Visible = !Visible;
    }

    async Task VisibleChangedHandler(bool isVisible)
    {
        await VisibleChanged.InvokeAsync(isVisible);
        Visible = isVisible;
    }
}

<style>
    .mud-dialog-width-lg {
        width: 292px;
    }

    .mud-dialog .mud-dialog-title {
        background: #594ae2;
        color: #fff;
    }

        .mud-dialog .mud-dialog-title .mud-button-root {
            color: #fff;
        }
</style>