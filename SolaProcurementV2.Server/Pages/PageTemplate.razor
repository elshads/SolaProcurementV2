@page "/pagetemplate"

@implements IDisposable
@inject StatusService StatusService
@inject AccountService ModelService
@using Model = Account


<PageTitle>@pageTitle</PageTitle>

<ReferenceDropDownList Data="@PageData.BusinessUnitList" @bind-Value="@PageData.SelectedBusinessUnit" ValueField="@nameof(BusinessUnit.Id)" TextField="@nameof(BusinessUnit.Code)" Width="300px" Class="mb-2" ShowId="@devMode" />

<TelerikTabStrip @bind-ActiveTabIndex="@activeTabIndex">
    <TabStripTab Title="List">
        <TelerikGrid @ref="@gridRef" @key="@gridKey" Data="@modelList" Height="calc(100vh - 245px)"
                     Pageable="true" Sortable="true" Navigable="true" Groupable="@showGroup"
                     FilterMode="@GridFilterMode.FilterMenu" ShowColumnMenu="true"
                     Resizable="true" Reorderable="true" PageSize="@gridPageSize"
                     SelectionMode="@(editMode ? GridSelectionMode.None : GridSelectionMode.Multiple)" @bind-SelectedItems="@selectedModelList"
                     OnRowClick="@OnRowClickHandler" OnRowDoubleClick="@OnRowDoubleClickHandler"
                     OnRowContextMenu="@OnRowContextMenu" ConfirmDelete="true"
                     OnCreate="@CreateHandler" OnEdit="@EditHandler" OnUpdate="@UpdateHandler" OnCancel="@CancelHandler" OnDelete="@(e => DeleteHandler(e, 1))">
            <GridToolBar>
                @if (!gridReadOnly)
                {
                    <GridCommandButton Command="Add" Icon="add" Enabled="@(!editMode && PageData.Menu.CreateAccess)" OnClick="CreateHandler">Add</GridCommandButton>
                    <GridCommandButton Command="Delete" Icon="delete" Enabled="@(!editMode && selectedModelList.Count() > 0 && PageData.Menu.DeleteAccess)" OnClick="@(e => DeleteHandler(e, 2))">Delete</GridCommandButton>
                }
                <MudSpacer />
                <GridCommandButton Command="ExportToExcel" Icon="excel" OnClick="ExportToExcel">Export to Excel</GridCommandButton>
                <GridCommandButton Command="ShowRowButtons" Icon="button" OnClick="@(() => showRowButtons = !showRowButtons)">Row buttons</GridCommandButton>
                <GridCommandButton Command="ShowDecimals" Icon="decimal-decrease" OnClick="@(() => showDecimals = !showDecimals)">Decimals</GridCommandButton>
                <GridCommandButton Command="ShowGroup" Icon="layout" OnClick="@(() => showGroup = !showGroup)">Group</GridCommandButton>
                <MudText Class="ml-6" Align="Align.Right">Rows per page:</MudText>
                <TelerikDropDownList Width="100px" TextField="Caption" ValueField="Size" @bind-Value="gridPageSize"
                                     Data="@(new List<GridPageSize>() {
            new GridPageSize {Caption = $"All ({modelList.Count()})", Size = modelList.Count()},
            new GridPageSize {Caption="10", Size=10},
            new GridPageSize {Caption="20", Size=20},
            new GridPageSize {Caption="50", Size=50},
            new GridPageSize {Caption="100", Size=100},
            new GridPageSize {Caption="1000", Size=1000}})"></TelerikDropDownList>
            </GridToolBar>
            <GridAggregates>
                <GridAggregate Field=@nameof(Model.Amount) Aggregate="@GridAggregateType.Sum" />
            </GridAggregates>
            <GridColumns>
                <GridCommandColumn ShowColumnMenu="false" Reorderable="false" Width="90px" Visible="@(showRowButtons && !gridReadOnly)">
                    <GridCommandButton Command="Edit" Icon="edit" ShowInEdit="false" Enabled="(!editMode && PageData.Menu.UpdateAccess)" />
                    <GridCommandButton Command="Save" Icon="save" ShowInEdit="true" OnClick="@UpdateHandler" />
                    <GridCommandButton Command="Cancel" Icon="cancel" ShowInEdit="true" />
                    <GridCommandButton Command="Delete" Icon="delete" ShowInEdit="false" Enabled="(!editMode && PageData.Menu.DeleteAccess)" />
                </GridCommandColumn>
                <GridCheckboxColumn ShowColumnMenu="false" Reorderable="false" Locked="true" Width="42px" Visible="@(!editMode)" />
                <GridColumn Field="@(nameof(Model.RowIndex))" Title="Index" Width="70px" Editable="false" Groupable="false" Filterable="false" TextAlign="ColumnTextAlign.Right" Visible="false" />
                @*<GridColumn Field="@(nameof(Model.LineNo))" Visible="true" Title="Line #" Width="61px" Editable="false" ShowColumnMenu="false" Reorderable="false" Groupable="false" Filterable="false" Locked="true" TextAlign="ColumnTextAlign.Right" />*@
                <GridColumn Field="@(nameof(Model.Id))" Title="Id" Width="70px" Editable="false" TextAlign="ColumnTextAlign.Right" Visible="@devMode" />
                <GridColumn Field="@(nameof(Model.Code))" Title="Code" />
                <GridColumn Field="@(nameof(Model.Name))" Title="Name" />
                <GridColumn Field="@(nameof(Model.AccountTypeId))" Title="Account Type" TextAlign="ColumnTextAlign.Right">
                    <EditorTemplate>
                        @{
                            <TelerikNumericTextBox Arrows="false" @bind-Value="@((context as Model).AccountTypeId)"></TelerikNumericTextBox>
                        }
                    </EditorTemplate>
                </GridColumn>
                <GridColumn Field="@(nameof(Model.StatusId))" Title="Status">
                    <Template>
                        @{
                            var rowContext = (context as Model);
                            var lookupValue = statusList.FirstOrDefault(e => e.Id == rowContext.StatusId);
                            var displayValue = (lookupValue != null ? lookupValue.Name : "not found");
                            <text>@displayValue</text>
                        }
                    </Template>
                    <EditorTemplate>
                        @{
                            var rowContext = (context as Model);
                            <GridDropDownList Data="@statusList" @bind-Value="@rowContext.StatusId" ValueField="@nameof(Status.Id)" TextField="@nameof(Status.Name)" ShowId="@devMode" />
                        }
                    </EditorTemplate>
                </GridColumn>
                <GridColumn Field="@(nameof(Model.Amount))" Title="Amount" TextAlign="ColumnTextAlign.Right">
                    <Template>
                        @{
                            <span>@((context as Model).Amount.ToString(showDecimals ? "0.####" : "0.00"))</span>
                        }
                    </Template>
                    <EditorTemplate>
                        @{
                            <TelerikNumericTextBox Arrows="false" @bind-Value="@((context as Model).Amount)" Decimals="9"></TelerikNumericTextBox>
                        }
                    </EditorTemplate>
                    <FooterTemplate>
                        @{
                            <span class="totals"><span>Total: &nbsp; </span><span>@context.Sum?.ToString(showDecimals ? "0.####" : "0.00")</span></span>
                        }
                    </FooterTemplate>
                    <GroupFooterTemplate>
                        @{
                            <span class="totals"><span>Group Total: &nbsp; </span><span>@context.Sum?.ToString(showDecimals ? "0.####" : "0.00")</span></span>
                        }
                    </GroupFooterTemplate>
                </GridColumn>
            </GridColumns>
        </TelerikGrid>
        <TelerikContextMenu @ref="@gridContextMenuRef" Data="@StaticData.MenuItemList"
                            OnClick="@((MenuItem argsItem) => ContextMenuClickHandler(argsItem))">
        </TelerikContextMenu>
    </TabStripTab>
    <TabStripTab Title="Card">
        <TelerikForm Model="@currentModel" OnValidSubmit="@OnFormSubmit">
            <FormValidation>
                <FluentValidationValidator DisableAssemblyScanning="true" />
            </FormValidation>
            <FormItems>
                <FormItem Field="@nameof(Model.Id)" Enabled="false" LabelText="Id"></FormItem>
                <FormItem Field="@nameof(Model.Code)" LabelText="Code"></FormItem>
                <FormItem Field="@nameof(Model.Name)" LabelText="Name" ColSpan="2"></FormItem>
                <FormItem>
                    <Template>
                        <label for="status">Status:</label>
                        <GridDropDownList Id="status" Data="@statusList" @bind-Value="@currentModel.StatusId" ValueField="@nameof(Status.Id)" TextField="@nameof(Status.Name)"></GridDropDownList>
                        <TelerikValidationMessage For="@(() => currentModel.StatusId)"></TelerikValidationMessage>
                    </Template>
                </FormItem>
            </FormItems>
        </TelerikForm>
        <fieldset class="px-2 py-2" style="width: 240px">
            <legend fieldset class="px-1">Item Code</legend>
            <input class="item-cell" type="text" size="1" value="@(string.IsNullOrEmpty(currentModel.Name) ? "-" : currentModel.Name)" readonly>
            <input class="item-cell" type="text" size="1" value="@(string.IsNullOrEmpty(currentModel.Name) ? "-" : currentModel.Name)" readonly>
            <input class="item-cell" type="text" size="1" value="@(string.IsNullOrEmpty(currentModel.Name) ? "-" : currentModel.Name)" readonly>
            <input class="item-cell" type="text" size="1" value="@(string.IsNullOrEmpty(currentModel.Name) ? "-" : currentModel.Name)" readonly>
            <input class="item-cell" type="text" size="1" value="@(string.IsNullOrEmpty(currentModel.Name) ? "-" : currentModel.Name)" readonly>
        </fieldset>
    </TabStripTab>
</TelerikTabStrip>


@code {
    int menuId = 1101;
    string pageTitle = "Page Title";
    bool gridReadOnly = false;

    bool showRowButtons { get; set; } = true;
    bool showDecimals { get; set; } = false;
    bool showGroup { get; set; } = false;

    [CascadingParameter] public AppState AppState { get; set; }
    [CascadingParameter] public DialogFactory Dialogs { get; set; }

    int activeTabIndex = 0;
    bool devMode = false;
    Model currentModel = new();

    // Grid specific variables - start
    List<Model> modelList = new();
    IEnumerable<Model> selectedModelList = new List<Model>();
    List<Model> deletedModelList = new List<Model>();
    Model selectedModel;

    Guid gridKey;
    TelerikGrid<Model> gridRef;
    TelerikContextMenu<MenuItem> gridContextMenuRef;
    int gridPageSize = 20;
    bool editMode = false;
    // Grid specific variables - end

    // Page specific variables - start
    IEnumerable<Status> statusList = new List<Status>();
    Status selectedStatus = new();
    // Page specific variables - end


    protected override async Task OnInitializedAsync()
    {
        AppState.IsLoading = true;

        await FillDefaultData();
        AppStateInitialize();

        AppState.IsLoading = false;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (PageData.SelectedBusinessUnit == null || !(PageData.BusinessUnitList.Select(e => e.Id).Contains(PageData.SelectedBusinessUnit.Id)) || !(PageData.Menu.ReadAccess))
            {
                NavigationManager.NavigateTo("/notfound");
            }
        }
    }

    async Task FillDefaultData()
    {
        PageData.GetAccessLevel(menuId);

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        var _businessUnitId = 0;
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("bu", out var _bu))
        {
            _businessUnitId = Convert.ToInt32(_bu);
        }

        var _modelId = 0;
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var _id))
        {
            _modelId = Convert.ToInt32(_id);
        }

        var _modelCode = "";
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("code", out var _code))
        {
            _modelCode = _code;
        }


        StaticData.MenuItemList = StaticData.GetMenuItemList(PageData.Menu, gridReadOnly);
        //currentModel = ModelService.GetById(_modelId, selectedBusinessUnit.Id, SessionData.SessionUser.Id);
        PageData.SetSelectedBusinessUnit(_businessUnitId);
        await FillData();
    }

    async Task FillData()
    {
        AppState.IsLoading = true;
        var _modelList = await ModelService.GetAllAsync(SessionData.SessionUser.Id, true);
        modelList = _modelList.Result.ToList();
        statusList = await StatusService.GetAllAsync();
        AppState.IsLoading = false;
    }

    void AppStateInitialize()
    {
        AppState.OnBackClick += BackClick;
        AppState.OnAddClick += AddClick;
        AppState.OnEditClick += EditClick;
        AppState.OnSaveClick += SaveClick;
        AppState.OnDeleteClick += DeleteClick;
        AppState.OnRefreshClick += RefreshClick;
        AppState.OnReportsClick += ReportsClick;
        AppState.OnAttachmentsClick += AttachmentsClick;
        AppState.OnApproveClick += ApproveClick;
        AppState.OnSuspendClick += SuspendClick;
        AppState.OnRejectClick += RejectClick;
        AppState.OnReportProblemClick += ReportProblemClick;
        AppState.OnDocumentationClick += DocumentationClick;
        AppState.OnDevModeClick += DevModeClick;
        AppState.OnPropertiesClick += PropertiesClick;

        AppState.IsBackVisible = true;
        AppState.IsBackDisabled = false;
        AppState.IsAddVisible = true;
        AppState.IsAddDisabled = (!PageData.Menu.CreateAccess);
        AppState.IsEditVisible = true;
        AppState.IsEditDisabled = (!PageData.Menu.UpdateAccess);
        AppState.IsSaveVisible = true;
        AppState.IsSaveDisabled = false;
        AppState.IsDeleteVisible = true;
        AppState.IsDeleteDisabled = (!PageData.Menu.DeleteAccess); ;
        AppState.IsRefreshVisible = true;
        AppState.IsRefreshDisabled = false;
        AppState.IsReportsVisible = true;
        AppState.IsReportsDisabled = false;
        AppState.IsAttachmentsVisible = true;
        AppState.IsAttachmentsDisabled = false;
        AppState.IsApprovalVisible = true;
        AppState.IsApproveVisible = true;
        AppState.IsApproveDisabled = false;
        AppState.IsSuspendVisible = true;
        AppState.IsSuspendDisabled = false;
        AppState.IsRejectVisible = true;
        AppState.IsRejectDisabled = false;
        AppState.IsReportProblemVisible = true;
        AppState.IsReportProblemDisabled = false;
        AppState.IsDocumentationVisible = true;
        AppState.IsDocumentationDisabled = false;
        AppState.IsDevModeVisible = true;
        AppState.IsDevModeDisabled = false;
        AppState.IsPropertiesVisible = true;
        AppState.IsPropertiesDisabled = false;
    }

    void IDisposable.Dispose()
    {
        AppState.OnBackClick -= BackClick;
        AppState.OnAddClick -= AddClick;
        AppState.OnEditClick -= EditClick;
        AppState.OnSaveClick -= SaveClick;
        AppState.OnDeleteClick -= DeleteClick;
        AppState.OnRefreshClick -= RefreshClick;
        AppState.OnReportsClick -= ReportsClick;
        AppState.OnAttachmentsClick -= AttachmentsClick;
        AppState.OnApproveClick -= ApproveClick;
        AppState.OnSuspendClick -= SuspendClick;
        AppState.OnRejectClick -= RejectClick;
        AppState.OnReportProblemClick -= ReportProblemClick;
        AppState.OnDocumentationClick -= DocumentationClick;
        AppState.OnDevModeClick -= DevModeClick;
        AppState.OnPropertiesClick -= PropertiesClick;
    }

    void ShowProperties(PropertiesData propertiesData)
    {
        AppState.PropertiesData = propertiesData;
    }

    void BackClick()
    {
        //
    }

    void AddClick()
    {
        //
    }

    void EditClick()
    {
        //
    }

    void SaveClick()
    {
        //
    }

    void DeleteClick()
    {
        //
    }

    void RefreshClick()
    {
        //
    }

    void ReportsClick()
    {
        //
    }

    void AttachmentsClick()
    {
        //
    }

    void ApproveClick()
    {
        //
    }

    void SuspendClick()
    {
        //
    }

    void RejectClick()
    {
        //
    }

    void ReportProblemClick()
    {
        //
    }

    void DocumentationClick()
    {
        //
    }

    void DevModeClick()
    {
        devMode = !devMode;
        StateHasChanged();
    }

    void PropertiesClick()
    {
        //
    }

    void OnRowClickHandler(GridRowClickEventArgs args)
    {
        //
    }

    void OnRowDoubleClickHandler(GridRowClickEventArgs args)
    {
        var argsItem = args.Item as Model;
        GoToDetails(argsItem.Id, 1);
    }

    void GoToDetails(int id, int bu)
    {
        NavigationManager.NavigateTo($"/users?id={id}&bu={bu}");
    }

    void SetEditMode(Model argsItem)
    {
        editMode = true;
        var currState = gridRef.GetState();
        currState.InsertedItem = null;
        currState.EditItem = null;
        currState.OriginalEditItem = null;

        Model itemToEdit = new(argsItem);

        currState.EditItem = itemToEdit;
        currState.OriginalEditItem = argsItem;
        gridRef.SetState(currState);
    }


    async Task OnRowContextMenu(GridRowClickEventArgs args)
    {
        if (!editMode)
        {
            var argsItem = args.Item as Model;
            selectedModel = argsItem;
            if (args.EventArgs is MouseEventArgs mouseEventArgs)
            {
                await gridContextMenuRef.ShowAsync(mouseEventArgs.ClientX, mouseEventArgs.ClientY);
            }
        }
    }

    async Task ContextMenuClickHandler(MenuItem menuItem)
    {
        if (menuItem.Action != null)
        {
            menuItem.Action.Invoke();
        }
        else
        {

            switch (menuItem.CommandName)
            {
                case "GoToDetails":
                    GoToDetails(selectedModel.Id, 1);
                    break;
                case "ShowProperties":
                    //
                    break;
                case "BeginEdit":
                    var currState = gridRef.GetState();
                    currState.InsertedItem = null;
                    Model itemToEdit = new(selectedModel);
                    currState.OriginalEditItem = selectedModel;
                    currState.EditItem = itemToEdit;
                    await gridRef.SetState(currState);
                    break;
                case "BeginDelete":
                    await DeleteHandler(null, 3);
                    break;
                case "All":
                    gridPageSize = modelList.Count();
                    break;
                case "10":
                    gridPageSize = 10;
                    break;
                case "20":
                    gridPageSize = 20;
                    break;
                case "50":
                    gridPageSize = 50;
                    break;
                case "100":
                    gridPageSize = 100;
                    break;
                case "1000":
                    gridPageSize = 1000;
                    break;
                default:
                    break;
            }
        }
    }

    
    // Grid CRUD events - start

    void CreateHandler(GridCommandEventArgs args)
    {
        var argsItem = (Model)args.Item;
        selectedModel = argsItem;

    }

    void EditHandler(GridCommandEventArgs args)
    {
        editMode = true;
        var argsItem = (Model)args.Item;
        selectedModel = argsItem;
    }

    void UpdateHandler(GridCommandEventArgs args)
    {
        var argsItem = (Model)args.Item;
        if (argsItem.RowIndex == -1)
        {
            argsItem.RowIndex = ModelService.GetNextRowIndex(modelList);
            //argsItem.LineNo = ModelService.GetNextLineNo(modelList);
            modelList.Add(argsItem);
        }
        else
        {
            modelList[argsItem.RowIndex] = argsItem;
        }

        selectedModel = null;
        editMode = false;
    }

    void CancelHandler(GridCommandEventArgs args)
    {
        var argsItem = (Model)args.Item;
        selectedModel = null;
        editMode = false;
    }

    async Task DeleteHandler(GridCommandEventArgs args, int sourceButton)
    {
        var argsItem = (Model)args?.Item;

        if (sourceButton == 1 && argsItem != null)
        {
            var deletedData = argsItem.Id;
            deletedModelList.Add(argsItem);
            modelList.RemoveAt(argsItem.RowIndex);
            UpdateGrid();
            AppState.ShowAlert($"A record with Id {deletedData} successfully deleted", Severity.Success);
        }
        else if (sourceButton == 2 && selectedModelList.Count() > 0)
        {
            var count = selectedModelList.Count();
            var isConfirmed = await Dialogs.ConfirmAsync($"Are you sure you want to delete {count} record(s)?", "Delete!");

            if (isConfirmed)
            {
                var tempList = new List<Model>(selectedModelList);
                foreach (var item in tempList)
                {
                    deletedModelList.Add(item);
                    modelList.RemoveAt(item.RowIndex);
                }
                UpdateGrid();
                AppState.ShowAlert($"{count} record(s) were successfully deleted", Severity.Success);
            }
        }
        else if (sourceButton == 3 && selectedModel != null)
        {
            var isConfirmed = await Dialogs.ConfirmAsync($"Are you sure you want to delete a record?", "Delete!");

            if (isConfirmed)
            {
                var deletedData = selectedModel.Id;
                deletedModelList.Add(selectedModel);
                modelList.RemoveAt(selectedModel.RowIndex);
                UpdateGrid();
                AppState.ShowAlert($"A record with Id {deletedData} successfully deleted", Severity.Success);
            }
            else
            {
                selectedModel = null;
            }
        }
        else
        {
            AppState.ShowAlert("Item is not selected", Severity.Warning);
        }
    }

    void UpdateGrid()
    {
        AppState.IsLoading = true;
        var tempList = ModelService.IndexList(modelList);
        modelList = tempList.ToList();
        selectedModelList = new List<Model>();
        gridKey = Guid.NewGuid();
        deletedModelList = deletedModelList.Where(e => e.Id != 0).ToList();
        AppState.IsLoading = false;
    }

    void ExportToExcel()
    {
        ModelService.ExportToExcel(modelList);
    }

    // Grid CRUD events - end

    // Form events - start

    void OnFormSubmit()
    {

    }

    // Form events - start

}
